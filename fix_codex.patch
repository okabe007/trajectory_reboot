diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index 4fb0295..ff6e5da 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -63,53 +63,56 @@ def _egg_position(constants):
         cx = (constants.get("x_min", 0) + constants.get("x_max", 0)) / 2
         cy = (constants.get("y_min", 0) + constants.get("y_max", 0)) / 2
         cz = (constants.get("z_min", 0) + constants.get("z_max", 0)) / 2
         positions = {"center": (cx, cy, cz), "bottom_center": (cx, cy, cz), "bottom_edge": (cx, cy, cz)}
     else:
         raise RuntimeError(f"Unknown shape '{shape}'")
 
     if loc not in positions:
         raise RuntimeError(f"Invalid egg_localization '{loc}' for shape '{shape}'")
 
     return positions[loc]
 
 def plot_2d_trajectories(trajs, constants, save_path=None, show=True, max_sperm=None):
     x_min, x_max, y_min, y_max, z_min, z_max = get_limits(constants)
 
     fig, axs = plt.subplots(1, 3, figsize=(10, 4))
 
     shape = str(constants.get('shape', '')).lower()
     drop_r = float(constants.get('drop_r', 0.0))
     spot_r = float(constants.get('spot_r', 0.0))
     spot_bottom_height = float(constants.get('spot_bottom_height', 0.0))
     spot_bottom_r = float(constants.get('spot_bottom_r', spot_r))
 
     if shape == 'spot' and spot_r > 0:
         axis_configs = [
-            (axs[0], (-spot_r, spot_r), (-spot_r, spot_r), "X", "Y", "XY-projection"),
-            (axs[1], (-spot_r, spot_r), (spot_bottom_height, spot_r), "X", "Z", "XZ-projection"),
-            (axs[2], (-spot_r, spot_r), (spot_bottom_height, spot_r), "Y", "Z", "YZ-projection"),
+            (axs[0], (-spot_bottom_r, spot_bottom_r), (-spot_bottom_r, spot_bottom_r),
+             "X", "Y", "XY-projection"),
+            (axs[1], (-spot_bottom_r, spot_bottom_r), (spot_bottom_height, spot_r),
+             "X", "Z", "XZ-projection"),
+            (axs[2], (-spot_bottom_r, spot_bottom_r), (spot_bottom_height, spot_r),
+             "Y", "Z", "YZ-projection"),
         ]
     else:
         axis_configs = [
             (axs[0], (x_min, x_max), (y_min, y_max), "X", "Y", "XY-projection"),
             (axs[1], (x_min, x_max), (z_min, z_max), "X", "Z", "XZ-projection"),
             (axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z", "YZ-projection"),
         ]
 
     for ax, xlim, ylim, xlabel, ylabel, title in axis_configs:
         equal = shape in ('drop', 'cube', 'spot')
         _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel, equal)
         ax.set_title(title)
         if shape == 'drop' and drop_r > 0:
             ax.add_patch(
                 patches.Circle((0, 0), drop_r, ec='none', facecolor='red', alpha=0.1)
             )
         elif shape == 'cube':
             width = xlim[1] - xlim[0]
             height = ylim[1] - ylim[0]
             ax.add_patch(
                 patches.Rectangle((xlim[0], ylim[0]), width, height,
                                   ec='none', facecolor='red', alpha=0.1)
             )
         elif shape == 'spot' and spot_r > 0:
             if xlabel == 'X' and ylabel == 'Y':
	