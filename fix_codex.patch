diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index ff6e5da..e07ce8f 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -83,67 +83,73 @@ def plot_2d_trajectories(trajs, constants, save_path=None, show=True, max_sperm=
     spot_bottom_height = float(constants.get('spot_bottom_height', 0.0))
     spot_bottom_r = float(constants.get('spot_bottom_r', spot_r))
 
     if shape == 'spot' and spot_r > 0:
         axis_configs = [
             (axs[0], (-spot_bottom_r, spot_bottom_r), (-spot_bottom_r, spot_bottom_r),
              "X", "Y", "XY-projection"),
             (axs[1], (-spot_bottom_r, spot_bottom_r), (spot_bottom_height, spot_r),
              "X", "Z", "XZ-projection"),
             (axs[2], (-spot_bottom_r, spot_bottom_r), (spot_bottom_height, spot_r),
              "Y", "Z", "YZ-projection"),
         ]
     else:
         axis_configs = [
             (axs[0], (x_min, x_max), (y_min, y_max), "X", "Y", "XY-projection"),
             (axs[1], (x_min, x_max), (z_min, z_max), "X", "Z", "XZ-projection"),
             (axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z", "YZ-projection"),
         ]
 
     for ax, xlim, ylim, xlabel, ylabel, title in axis_configs:
         equal = shape in ('drop', 'cube', 'spot')
         _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel, equal)
         ax.set_title(title)
         if shape == 'drop' and drop_r > 0:
             ax.add_patch(
-                patches.Circle((0, 0), drop_r, ec='none', facecolor='red', alpha=0.1)
+                patches.Circle((0, 0), drop_r, ec='none', facecolor='pink', alpha=0.1)
             )
         elif shape == 'cube':
             width = xlim[1] - xlim[0]
             height = ylim[1] - ylim[0]
             ax.add_patch(
-                patches.Rectangle((xlim[0], ylim[0]), width, height,
-                                  ec='none', facecolor='red', alpha=0.1)
+                patches.Rectangle(
+                    (xlim[0], ylim[0]),
+                    width,
+                    height,
+                    ec='none',
+                    facecolor='pink',
+                    alpha=0.1,
+                )
             )
         elif shape == 'spot' and spot_r > 0:
             if xlabel == 'X' and ylabel == 'Y':
                 ax.add_patch(
-                    patches.Circle((0, 0), spot_bottom_r, ec='none', facecolor='red', alpha=0.1)
+                    patches.Circle((0, 0), spot_bottom_r, ec='none', facecolor='pink', alpha=0.1)
                 )
             else:
                 ax.add_patch(
-                    patches.Circle((0, 0), spot_r, ec='none', facecolor='red', alpha=0.1)
+                    patches.Circle((0, 0), spot_r, ec='none', facecolor='pink', alpha=0.1)
                 )
                 ax.axhline(spot_bottom_height, color='gray', linestyle='--', linewidth=0.8)
 
     if shape != 'ceros':
         egg_x, egg_y, egg_z = _egg_position(constants)
         for ax, (x, y) in zip(axs, [(egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)]):
             ax.add_patch(
                 patches.Circle(
                     (x, y),
                     radius=constants.get('gamete_r', 0),
                     facecolor='yellow',
                     alpha=0.8,
                     ec='gray',
                     linewidth=1.0,
                 )
             )
 
     n_sperm = min(trajs.shape[0], max_sperm or trajs.shape[0])
     for s in range(n_sperm):
         axs[0].plot(trajs[s, :, 0], trajs[s, :, 1])
         axs[1].plot(trajs[s, :, 0], trajs[s, :, 2])
         axs[2].plot(trajs[s, :, 1], trajs[s, :, 2])
 
     fig.suptitle(
         f"shape={constants.get('shape')}, vol={constants.get('volume')}, "
