diff --git a/spermsim/main.py b/spermsim/main.py
index cba622c..8741865 100644
--- a/spermsim/main.py
+++ b/spermsim/main.py
@@ -1,53 +1,77 @@
 import ast
 import configparser
 import os
 import random
 import sqlite3
 import sys
 import time
 from datetime import datetime
 from enum import Enum
 
 # IO 状態を表す列挙型（独自定義または外部ファイルから）
 from io_status import IOStatus
 
 # --- GUIライブラリ ---
 import tkinter as tk
 
 # --- 外部ライブラリ ---
 import matplotlib
 matplotlib.use("Agg")  # GUI 非依存の描画専用モード
 import matplotlib.pyplot as plt
 from matplotlib.animation import FuncAnimation
 import matplotlib.patches as patches
 import numpy as np
 import numpy.linalg as LA
 import pandas as pd
-from scipy.spatial.transform import Rotation as R
 from tqdm import tqdm
 
+
+def rotation_matrix_from_vectors(vec1, vec2):
+    """Return rotation matrix that rotates vec1 to vec2."""
+    a = np.array(vec1, dtype=float)
+    b = np.array(vec2, dtype=float)
+    a /= LA.norm(a) + 1e-12
+    b /= LA.norm(b) + 1e-12
+    v = np.cross(a, b)
+    c = np.dot(a, b)
+    s = LA.norm(v)
+    if s < 1e-12:
+        if c > 0:
+            return np.eye(3)
+        if abs(a[0]) < 0.9:
+            perp = np.array([1.0, 0.0, 0.0])
+        else:
+            perp = np.array([0.0, 1.0, 0.0])
+        v = np.cross(a, perp)
+        v /= LA.norm(v) + 1e-12
+        vx = np.array([[0, -v[2], v[1]], [v[2], 0, -v[0]], [-v[1], v[0], 0]])
+        return -np.eye(3) + 2 * np.outer(v, v)
+    vx = np.array([[0, -v[2], v[1]], [v[2], 0, -v[0]], [-v[1], v[0], 0]])
+    rot = np.eye(3) + vx + vx @ vx * ((1 - c) / (s ** 2))
+    return rot
+
 # --- 派生変数一元計算モジュールをインポート ---
 from tools.derived_constants import calculate_derived_constants
 from core.simulation import SpermSimulation as CoreSpermSimulation
 
 # --- ジオメトリ関連クラス/ファクトリ ---
 from .geometry import create_shape  # 必要ならself-import等は調整
 
 # --- データ・画像・動画保存パス等 ---
 try:
     _SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
 except NameError:
     _SCRIPT_DIR = os.getcwd()
 
 DATA_DIR  = os.path.join(_SCRIPT_DIR, "data")
 IMG_DIR   = os.path.join(DATA_DIR, "graphs")
 MOV_DIR   = os.path.join(DATA_DIR, "movies")
 os.makedirs(IMG_DIR, exist_ok=True)
 os.makedirs(MOV_DIR, exist_ok=True)
 DB_PATH_DEFAULT = os.path.join(DATA_DIR, "Trajectory.db")
 
 def _safe_anim_save(anim, output_path):
     """
     ffmpegが無くてもPillowWriterで保存を試みる安全ラッパー
     """
     try:
diff --git a/spermsim/main.py b/spermsim/main.py
index cba622c..8741865 100644
--- a/spermsim/main.py
+++ b/spermsim/main.py
@@ -1422,57 +1446,57 @@ class SpermSimulation:
                 new_tangent = rotate_vector_2d(selected_tangent, angle_adjust)
                 norm_tan = np.linalg.norm(new_tangent)
                 if norm_tan < constants['limit']:
                     new_tangent = selected_tangent
                     norm_tan = np.linalg.norm(new_tangent)
                 new_tangent /= norm_tan
                 last_vec_corrected = new_tangent * new_remaining
                 new_temp_position = intersection_point + last_vec_corrected
                 new_temp_position[2] = z_floor
                 new_last_vec = new_temp_position - intersection_point
             else:
                 new_remaining = np.linalg.norm(last_vec)
                 sphere_normal_3d = intersection_point
                 norm_sphere = np.linalg.norm(sphere_normal_3d)
                 if norm_sphere < constants['limit']:
                     sphere_normal_3d = np.array([0,0,1])
                     norm_sphere = 1.0
                 sphere_normal_3d /= norm_sphere
                 plane_normal = np.array([0,0,1], dtype=float)
                 dot_val = np.clip(np.dot(sphere_normal_3d, plane_normal), -1, 1)
                 angle_plane_sphere = np.arccos(dot_val)
                 def sample_vector_in_cone(axis, max_angle):
                     cos_max = np.cos(max_angle)
                     z_ = np.random.uniform(cos_max, 1.0)
                     phi_ = np.random.uniform(0, 2*np.pi)
-                    sqrt_part = np.sqrt(1 - z_*z_)
+                    sqrt_part = np.sqrt(1 - z_ * z_)
                     x_local = sqrt_part * np.cos(phi_)
                     y_local = sqrt_part * np.sin(phi_)
                     z_local = z_
-                    rot = R.align_vectors([[0,0,1]], [axis])[0]
+                    rot = rotation_matrix_from_vectors([0, 0, 1], axis)
                     v_local = np.array([x_local, y_local, z_local])
-                    return rot.apply(v_local)
+                    return rot.dot(v_local)
                 center_axis = (plane_normal + sphere_normal_3d) / 2
                 center_axis_norm = np.linalg.norm(center_axis)
                 if center_axis_norm < constants['limit']:
                     center_axis = plane_normal
                     center_axis_norm = 1.0
                 center_axis /= center_axis_norm
                 open_angle = angle_plane_sphere
                 random_3d_dir = sample_vector_in_cone(center_axis, open_angle)
                 last_vec_corrected = random_3d_dir * new_remaining
                 new_temp_position = intersection_point + last_vec_corrected
                 new_last_vec = new_temp_position - intersection_point
         else:
             new_temp_position = candidate_position
             new_last_vec = last_vec
         new_stick_status = stick_status
         if new_stick_status > 0:
             new_stick_status -= 1
         if new_stick_status <= 0:
             new_state = IOStatus.INSIDE
         else:
             new_state = IOStatus.BOTTOM_EDGE_MODE
         return new_temp_position, new_last_vec, new_stick_status, new_state
 class SpermPlot:
     already_saved_global_flag = False
 
