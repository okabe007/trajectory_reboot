diff --git a/core/simulation.py b/core/simulation.py
index a9a9df0..5d1cfa4 100644
--- a/core/simulation.py
+++ b/core/simulation.py
@@ -173,63 +173,62 @@ class SpermSimulation:
         save_path: Noneなら画面表示のみ、パス指定で保存
         """
         import matplotlib.pyplot as plt
         import numpy as np
         import os
 
         trajectories = np.array(self.trajectory)
         constants = self.constants
 
         if trajectories is None or len(trajectories) == 0:
             print("[WARNING] 軌跡データがありません。run()実行後にplot_trajectoriesしてください。")
             return
 
         # --- 軸幅の統一 ---
         all_mins = [constants["x_min"], constants["y_min"], constants["z_min"]]
         all_maxs = [constants["x_max"], constants["y_max"], constants["z_max"]]
         global_min = min(all_mins)
         global_max = max(all_maxs)
 
         fig, axes = plt.subplots(1, 3, figsize=(15, 6))
         ax_xy, ax_xz, ax_yz = axes
         colors = ['r', 'g', 'b', 'c', 'm', 'y', 'k']
         n_sperm = min(len(trajectories), max_sperm)
 
         # --- draw egg position ---
-        if constants.get("shape", "cube").lower() != "ceros":
-            egg_x, egg_y, egg_z = _egg_position(constants)
-            for ax, (x, y) in zip(axes, [(egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)]):
-                ax.add_patch(
-                    patches.Circle(
-                        (x, y),
-                        radius=constants.get("gamete_r", 0),
-                        facecolor="yellow",
-                        alpha=0.8,
-                        ec="gray",
-                        linewidth=1.0,
-                    )
+        egg_x, egg_y, egg_z = _egg_position(constants)
+        for ax, (x, y) in zip(axes, [(egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)]):
+            ax.add_patch(
+                patches.Circle(
+                    (x, y),
+                    radius=constants.get("gamete_r", 0),
+                    facecolor="yellow",
+                    alpha=0.8,
+                    ec="gray",
+                    linewidth=1.0,
                 )
+            )
 
         # XY投影
         for i in range(n_sperm):
             ax_xy.plot(trajectories[i][:,0], trajectories[i][:,1], color=colors[i % len(colors)])
         ax_xy.set_xlim(global_min, global_max)
         ax_xy.set_ylim(global_min, global_max)
         ax_xy.set_aspect('equal')
         ax_xy.set_xlabel("X")
         ax_xy.set_ylabel("Y")
         ax_xy.set_title("XY projection")
 
         # XZ投影
         for i in range(n_sperm):
             ax_xz.plot(trajectories[i][:,0], trajectories[i][:,2], color=colors[i % len(colors)])
         ax_xz.set_xlim(global_min, global_max)
         ax_xz.set_ylim(global_min, global_max)
         ax_xz.set_aspect('equal')
         ax_xz.set_xlabel("X")
         ax_xz.set_ylabel("Z")
         ax_xz.set_title("XZ projection")
 
         # YZ投影
         for i in range(n_sperm):
             ax_yz.plot(trajectories[i][:,1], trajectories[i][:,2], color=colors[i % len(colors)])
         ax_yz.set_xlim(global_min, global_max)
