diff --git a/spermsim/main.py b/spermsim/main.py
index a5691d6..dbf8641 100644
--- a/spermsim/main.py
+++ b/spermsim/main.py
@@ -1488,70 +1488,77 @@ class SpermPlot:
             self.z_max - self.z_min
         ])
 
     def _draw_graph(self, shape):
         print("@@@ draw_graph called")
         plt.close('all')
         plt.rcdefaults()
         if hasattr(self, "already_saved") and self.already_saved:
             return None
 
         # サブプロットの構成
         if shape == "ceros":
             fig, ax_single = plt.subplots(figsize=(4, 4), dpi=300)
             axes = [ax_single]
             axis_combi = [('X', 'Y', 0)]
         else:
             fig, axes = plt.subplots(1, 3, figsize=(12, 4), dpi=300)
             axis_combi = [('X', 'Y', 0), ('X', 'Z', 1), ('Y', 'Z', 2)]
 
         index_map = {'X': 0, 'Y': 1, 'Z': 2}
 
         # 卵子の可視化
         if shape != "ceros":
             egg_constants = self.constants.copy()
             egg_x, egg_y, egg_z, *_ , egg_center, _ = placement_of_eggs(egg_constants)
-            
+
             # ② 確認用の print 文
             print("===== 卵子描画前のパラメータ確認 =====")
             print("@@@gamete_r:", self.constants.get("gamete_r"))
             print("@@@z_min   :", self.constants.get("z_min"))
             print("@@@egg_z   :", egg_z)
-            print("@@@描画位置: (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z) =",
-                (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z))
+            print(
+                "@@@描画位置: (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z) =",
+                (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)
+            )
             print("=====================================")
 
-            
+            # 背景領域を先に描画することで卵子を上に重ねる
+            self.draw_motion_area(shape, axes, self.constants)
+
             for ax, (x, y) in zip(axes, [(egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)]):
                 ax.add_patch(
                     patches.Circle(
                         (x, y),
                         radius=self.constants['gamete_r'],
-                        facecolor='yellow', alpha=0.8, ec='gray', linewidth=1.0
+                        facecolor='yellow',
+                        alpha=0.8,
+                        ec='gray',
+                        linewidth=1.0,
+                        zorder=3,
                     )
                 )
-            self.draw_motion_area(shape, axes, self.constants)
 
         # 軌跡描画
         pbar = tqdm(
             total=self.simulation.number_of_sperm * (self.simulation.number_of_steps - 1) * len(axis_combi),
             desc="Plotting trajectories", ncols=100, ascii=True
         )
         for j in range(self.simulation.number_of_sperm):
             for i in range(self.simulation.number_of_steps - 1):
                 for axis1, axis2, idx in axis_combi:
                     axes[idx].plot(
                         self.simulation.trajectory[j, i:i+2, index_map[axis1]],
                         self.simulation.trajectory[j, i:i+2, index_map[axis2]],
                         color=self.simulation.vec_colors[j, i],
                         linewidth=self.simulation.vec_thickness_2d[j, i]
                     )
                     pbar.update(1)
         pbar.close()
 
         # --- 描画範囲・アスペクト比をconstantsから統一設定 ---
         if shape == "ceros":
             ax_single.set_xlim(self.constants['x_min'], self.constants['x_max'])
             ax_single.set_ylim(self.constants['y_min'], self.constants['y_max'])
             ax_single.set_aspect('equal', adjustable='box')
         else:
             for idx, ax in enumerate(axes):
