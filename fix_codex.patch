<<<<<<< Updated upstream
diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index c1a40a9..342c285 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -1,105 +1,170 @@
 import matplotlib.pyplot as plt
 import numpy as np
 import os
 from datetime import datetime
 from matplotlib import patches
 from tools.derived_constants import get_limits  # スマートなimport
=======
diff --git a/core/simulation.py b/core/simulation.py
index a9a9df0..5908149 100644
--- a/core/simulation.py
+++ b/core/simulation.py
@@ -302,26 +302,84 @@ class SpermSimulation:
>>>>>>> Stashed changes
 
         # 本数注釈
         fig.text(0.99, 0.01, f"※ 表示は全体の{perc_shown:.1f}%（{n_plot}本/{len(trajectories)}本）", ha='right', fontsize=10, color="gray")
 
         fig.tight_layout(rect=[0, 0.03, 1, 0.92])
 
         # --- 保存先パスをスクリプトの場所基準で作る ---
         import datetime
         dtstr = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
 
<<<<<<< Updated upstream
     fig, axs = plt.subplots(1, 3, figsize=(12, 4))
-    axis_configs = [
-        (axs[0], (x_min, x_max), (y_min, y_max), "X", "Y", "XY-projection"),
-        (axs[1], (x_min, x_max), (z_min, z_max), "X", "Z", "XZ-projection"),
-        (axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z", "YZ-projection"),
-    ]
 
     shape = str(constants.get('shape', '')).lower()
     drop_r = float(constants.get('drop_r', 0.0))
+    spot_r = float(constants.get('spot_r', 0.0))
+    spot_bottom_height = float(constants.get('spot_bottom_height', 0.0))
+    spot_bottom_r = float(constants.get('spot_bottom_r', spot_r))
+
+    if shape == 'spot' and spot_r > 0:
+        axis_configs = [
+            (axs[0], (-spot_r, spot_r), (-spot_r, spot_r), "X", "Y", "XY-projection"),
+            (axs[1], (-spot_r, spot_r), (spot_bottom_height, spot_r), "X", "Z", "XZ-projection"),
+            (axs[2], (-spot_r, spot_r), (spot_bottom_height, spot_r), "Y", "Z", "YZ-projection"),
+        ]
+    else:
+        axis_configs = [
+            (axs[0], (x_min, x_max), (y_min, y_max), "X", "Y", "XY-projection"),
+            (axs[1], (x_min, x_max), (z_min, z_max), "X", "Z", "XZ-projection"),
+            (axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z", "YZ-projection"),
+        ]
+
 
     for ax, xlim, ylim, xlabel, ylabel, title in axis_configs:
-        equal = shape == 'drop'
+        equal = shape in ('drop', 'cube', 'spot')
         _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel, equal)
         ax.set_title(title)
         if shape == 'drop' and drop_r > 0:
             ax.add_patch(
                 patches.Circle((0, 0), drop_r, ec='none', facecolor='red', alpha=0.1)
             )
+        elif shape == 'cube':
+            width = xlim[1] - xlim[0]
+            height = ylim[1] - ylim[0]
+            ax.add_patch(
+                patches.Rectangle((xlim[0], ylim[0]), width, height,
+                                  ec='none', facecolor='red', alpha=0.1)
+            )
+        elif shape == 'spot' and spot_r > 0:
+            if xlabel == 'X' and ylabel == 'Y':
+                ax.add_patch(
+                    patches.Circle((0, 0), spot_bottom_r, ec='none', facecolor='red', alpha=0.1)
+                )
+            else:
+                ax.add_patch(
+                    patches.Circle((0, 0), spot_r, ec='none', facecolor='red', alpha=0.1)
+                )
+                ax.axhline(spot_bottom_height, color='gray', linestyle='--', linewidth=0.8)
 
     n_sperm = min(trajs.shape[0], max_sperm or trajs.shape[0])
     for s in range(n_sperm):
         axs[0].plot(trajs[s, :, 0], trajs[s, :, 1])
         axs[1].plot(trajs[s, :, 0], trajs[s, :, 2])
         axs[2].plot(trajs[s, :, 1], trajs[s, :, 2])
 
     fig.suptitle(
         f"shape={constants.get('shape')}, vol={constants.get('volume')}, "
         f"sperm_conc={constants.get('sperm_conc')}, vsl={constants.get('vsl')}, "
         f"sim_min={constants.get('sim_min')}, sim_repeat={constants.get('sim_repeat')}",
         fontsize=10
     )
     plt.tight_layout(rect=[0, 0, 1, 0.95])
     if not save_path:
         save_path = _make_save_path("trajectory_2d", "png")
     plt.savefig(save_path, dpi=150)
     print(f"[INFO] 2D図を保存しました: {save_path}")
     if show:
         plt.show()
 
 def plot_3d_trajectories(traj: np.ndarray, constants: dict, max_sperm: int = 5, show=True):
+    shape = str(constants.get('shape', '')).lower()
+
     x_min, x_max, y_min, y_max, z_min, z_max = get_limits(constants)
+    if shape == 'spot':
+        spot_r = float(constants.get('spot_r', 0.0))
+        spot_bottom_height = float(constants.get('spot_bottom_height', 0.0))
+        if spot_r > 0:
+            x_min, x_max = -spot_r, spot_r
+            y_min, y_max = -spot_r, spot_r
+            z_min, z_max = spot_bottom_height, spot_r
+
     n_sperm = min(traj.shape[0], max_sperm)
 
     fig = plt.figure(figsize=(6, 6))
     ax = fig.add_subplot(111, projection='3d')
     for s in range(n_sperm):
         ax.plot(traj[s, :, 0], traj[s, :, 1], traj[s, :, 2], label=f"Sperm {s}" if n_sperm <= 5 else None)
 
-    shape = str(constants.get('shape', '')).lower()
     drop_r = float(constants.get('drop_r', 0.0))
     if shape == 'drop' and drop_r > 0:
         u = np.linspace(0, 2*np.pi, 60)
         v = np.linspace(0, np.pi, 60)
         sx = drop_r * np.outer(np.sin(v), np.cos(u))
         sy = drop_r * np.outer(np.sin(v), np.sin(u))
         sz = drop_r * np.outer(np.cos(v), np.ones_like(u))
         ax.plot_surface(sx, sy, sz, color='red', alpha=0.1)
+    elif shape == 'cube':
+        xs = [x_min, x_max]
+        ys = [y_min, y_max]
+        zs = [z_min, z_max]
+        # 6 faces of the cube
+        for z in zs:
+            X, Y = np.meshgrid(xs, ys)
+            Z = np.full_like(X, z)
+            ax.plot_surface(X, Y, Z, color='red', alpha=0.1)
+        for x in xs:
+            Y, Z = np.meshgrid(ys, zs)
+            X = np.full_like(Y, x)
+            ax.plot_surface(X, Y, Z, color='red', alpha=0.1)
+        for y in ys:
+            X, Z = np.meshgrid(xs, zs)
+            Y = np.full_like(X, y)
+            ax.plot_surface(X, Y, Z, color='red', alpha=0.1)
+    elif shape == 'spot':
+        spot_r = float(constants.get('spot_r', 0.0))
+        spot_angle = float(constants.get('spot_angle', 0.0))
+        if spot_r > 0 and spot_angle > 0:
+            u = np.linspace(0, 2 * np.pi, 60)
+            v = np.linspace(0, np.deg2rad(spot_angle), 60)
+            sx = spot_r * np.outer(np.sin(v), np.cos(u))
+            sy = spot_r * np.outer(np.sin(v), np.sin(u))
+            sz = spot_r * np.outer(np.cos(v), np.ones_like(u))
+            ax.plot_surface(sx, sy, sz, color='red', alpha=0.1)
 
     ax.set_xlabel("X")
     ax.set_ylabel("Y")
     ax.set_zlabel("Z")
     ax.set_xlim(x_min, x_max)
     ax.set_ylim(y_min, y_max)
     ax.set_zlim(z_min, z_max)
     ax.set_box_aspect([
         x_max - x_min,
         y_max - y_min,
         z_max - z_min
     ])
     ax.set_title("3D Trajectory")
     if n_sperm <= 5:
         ax.legend()
 
     fig.suptitle(
         f"shape={constants.get('shape')}, vol={constants.get('volume')}, "
         f"sperm_conc={constants.get('sperm_conc')}, vsl={constants.get('vsl')}, "
         f"sim_min={constants.get('sim_min')}, sim_repeat={constants.get('sim_repeat')}",
         fontsize=10
     )
     save_path = _make_save_path("trajectory_3d", "png")
     plt.savefig(save_path, dpi=300)
     print(f"[INFO] 3D図を保存しました: {save_path}")
=======
         # このスクリプトがあるディレクトリを基準にする
         base_dir = os.path.dirname(__file__)
         figs_dir = os.path.join(base_dir, "figs_and_movies")
         os.makedirs(figs_dir, exist_ok=True)
 
         if save_path is None:
             # 自動で日付入りファイル名
             save_path = os.path.join(figs_dir, f"trajectory_{dtstr}.png")
         else:
             # ファイル名だけ渡された場合もFigs_and_Moviesに入れる
             filename = os.path.basename(save_path)
             save_path = os.path.join(figs_dir, filename)
 
         plt.savefig(save_path)
         plt.close()
-        print(f"[INFO] 軌跡画像を保存しました: {save_path}")
+        print(f"[INFO] 軌跡画像を保存しました: {save_path}")
+
+    def plot_movie_trajectories(self, save_path=None):
+        """Save an animation of the XY trajectories."""
+        from matplotlib.animation import FuncAnimation
+        import numpy as np
+
+        if not self.trajectory:
+            print("[WARNING] 軌跡データがありません。run()実行後にplot_movie_trajectoriesしてください。")
+            return None
+
+        traj = np.array(self.trajectory)
+        n_sperm, n_steps, _ = traj.shape
+
+        x_min = traj[:, :, 0].min()
+        x_max = traj[:, :, 0].max()
+        y_min = traj[:, :, 1].min()
+        y_max = traj[:, :, 1].max()
+
+        fig, ax = plt.subplots()
+        ax.set_xlim(x_min, x_max)
+        ax.set_ylim(y_min, y_max)
+        ax.set_xlabel("X")
+        ax.set_ylabel("Y")
+        ax.set_title("XY Trajectory Animation")
+
+        lines = [ax.plot([], [], lw=1)[0] for _ in range(n_sperm)]
+
+        def init():
+            for line in lines:
+                line.set_data([], [])
+            return lines
+
+        def animate(i):
+            for line, t in zip(lines, traj):
+                line.set_data(t[: i + 1, 0], t[: i + 1, 1])
+            return lines
+
+        anim = FuncAnimation(fig, animate, init_func=init, frames=n_steps, interval=200, blit=True)
+
+        if save_path is None:
+            base_dir = os.path.dirname(__file__)
+            out_dir = os.path.join(base_dir, "figs_and_movies")
+            os.makedirs(out_dir, exist_ok=True)
+            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
+            save_path = os.path.join(out_dir, f"trajectory_{timestamp}.mp4")
+
+        try:
+            anim.save(save_path, writer="ffmpeg", codec="mpeg4", fps=5)
+        except Exception as e:
+            print(f"[WARN] ffmpeg保存失敗 ({e}) → pillow writerで再試行")
+            try:
+                anim.save(save_path, writer="pillow", fps=5)
+            except Exception as e2:
+                print(f"[ERROR] pillow writerでも保存に失敗: {e2}")
+
+        plt.close(fig)
+        print(f"[INFO] 動画を保存しました: {save_path}")
+        return save_path
>>>>>>> Stashed changes
