diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index a8cc67b..c1a40a9 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -1,58 +1,61 @@
 import matplotlib.pyplot as plt
 import numpy as np
 import os
 from datetime import datetime
 from matplotlib import patches
 from tools.derived_constants import get_limits  # スマートなimport
 
 def _make_save_path(prefix="trajectory", ext="png", dir="Figs_and_Movies"):
     os.makedirs(dir, exist_ok=True)
     timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
     return f"{dir}/{prefix}_{timestamp}.{ext}"
 
-def _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel):
+def _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel, equal=False):
     ax.set_xlim(*xlim)
     ax.set_ylim(*ylim)
     ax.set_xlabel(xlabel)
     ax.set_ylabel(ylabel)
+    if equal:
+        ax.set_aspect('equal', adjustable='box')
 
 def plot_2d_trajectories(trajs, constants, save_path=None, show=True, max_sperm=None):
     x_min, x_max, y_min, y_max, z_min, z_max = get_limits(constants)
 
     fig, axs = plt.subplots(1, 3, figsize=(12, 4))
     axis_configs = [
         (axs[0], (x_min, x_max), (y_min, y_max), "X", "Y", "XY-projection"),
         (axs[1], (x_min, x_max), (z_min, z_max), "X", "Z", "XZ-projection"),
         (axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z", "YZ-projection"),
     ]
 
     shape = str(constants.get('shape', '')).lower()
     drop_r = float(constants.get('drop_r', 0.0))
 
     for ax, xlim, ylim, xlabel, ylabel, title in axis_configs:
-        _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel)
+        equal = shape == 'drop'
+        _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel, equal)
         ax.set_title(title)
         if shape == 'drop' and drop_r > 0:
             ax.add_patch(
                 patches.Circle((0, 0), drop_r, ec='none', facecolor='red', alpha=0.1)
             )
 
     n_sperm = min(trajs.shape[0], max_sperm or trajs.shape[0])
     for s in range(n_sperm):
         axs[0].plot(trajs[s, :, 0], trajs[s, :, 1])
         axs[1].plot(trajs[s, :, 0], trajs[s, :, 2])
         axs[2].plot(trajs[s, :, 1], trajs[s, :, 2])
 
     fig.suptitle(
         f"shape={constants.get('shape')}, vol={constants.get('volume')}, "
         f"sperm_conc={constants.get('sperm_conc')}, vsl={constants.get('vsl')}, "
         f"sim_min={constants.get('sim_min')}, sim_repeat={constants.get('sim_repeat')}",
         fontsize=10
     )
     plt.tight_layout(rect=[0, 0, 1, 0.95])
     if not save_path:
         save_path = _make_save_path("trajectory_2d", "png")
     plt.savefig(save_path, dpi=150)
     print(f"[INFO] 2D図を保存しました: {save_path}")
     if show:
         plt.show()
