diff --git a/spermsim/main.py b/spermsim/main.py
index a5691d6..54def3a 100644
--- a/spermsim/main.py
+++ b/spermsim/main.py
@@ -1488,70 +1488,77 @@ class SpermPlot:
             self.z_max - self.z_min
         ])
 
     def _draw_graph(self, shape):
         print("@@@ draw_graph called")
         plt.close('all')
         plt.rcdefaults()
         if hasattr(self, "already_saved") and self.already_saved:
             return None
 
         # サブプロットの構成
         if shape == "ceros":
             fig, ax_single = plt.subplots(figsize=(4, 4), dpi=300)
             axes = [ax_single]
             axis_combi = [('X', 'Y', 0)]
         else:
             fig, axes = plt.subplots(1, 3, figsize=(12, 4), dpi=300)
             axis_combi = [('X', 'Y', 0), ('X', 'Z', 1), ('Y', 'Z', 2)]
 
         index_map = {'X': 0, 'Y': 1, 'Z': 2}
 
         # 卵子の可視化
         if shape != "ceros":
             egg_constants = self.constants.copy()
             egg_x, egg_y, egg_z, *_ , egg_center, _ = placement_of_eggs(egg_constants)
-            
+
             # ② 確認用の print 文
             print("===== 卵子描画前のパラメータ確認 =====")
             print("@@@gamete_r:", self.constants.get("gamete_r"))
             print("@@@z_min   :", self.constants.get("z_min"))
             print("@@@egg_z   :", egg_z)
-            print("@@@描画位置: (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z) =",
-                (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z))
+            print(
+                "@@@描画位置: (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z) =",
+                (egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)
+            )
             print("=====================================")
 
-            
+            # 背景領域を先に描画することで卵子を上に重ねる
+            self.draw_motion_area(shape, axes, self.constants)
+
             for ax, (x, y) in zip(axes, [(egg_x, egg_y), (egg_x, egg_z), (egg_y, egg_z)]):
                 ax.add_patch(
                     patches.Circle(
                         (x, y),
                         radius=self.constants['gamete_r'],
-                        facecolor='yellow', alpha=0.8, ec='gray', linewidth=1.0
+                        facecolor='yellow',
+                        alpha=0.8,
+                        ec='gray',
+                        linewidth=1.0,
+                        zorder=3,
                     )
                 )
-            self.draw_motion_area(shape, axes, self.constants)
 
         # 軌跡描画
         pbar = tqdm(
             total=self.simulation.number_of_sperm * (self.simulation.number_of_steps - 1) * len(axis_combi),
             desc="Plotting trajectories", ncols=100, ascii=True
         )
         for j in range(self.simulation.number_of_sperm):
             for i in range(self.simulation.number_of_steps - 1):
                 for axis1, axis2, idx in axis_combi:
                     axes[idx].plot(
                         self.simulation.trajectory[j, i:i+2, index_map[axis1]],
                         self.simulation.trajectory[j, i:i+2, index_map[axis2]],
                         color=self.simulation.vec_colors[j, i],
                         linewidth=self.simulation.vec_thickness_2d[j, i]
                     )
                     pbar.update(1)
         pbar.close()
 
         # --- 描画範囲・アスペクト比をconstantsから統一設定 ---
         if shape == "ceros":
             ax_single.set_xlim(self.constants['x_min'], self.constants['x_max'])
             ax_single.set_ylim(self.constants['y_min'], self.constants['y_max'])
             ax_single.set_aspect('equal', adjustable='box')
         else:
             for idx, ax in enumerate(axes):
diff --git a/spermsim/main.py b/spermsim/main.py
index a5691d6..54def3a 100644
--- a/spermsim/main.py
+++ b/spermsim/main.py
@@ -1719,69 +1726,69 @@ class SpermTrajectoryVisualizer:
                 f"sampling: {self.constants['sampl_rate_hz']} Hz,\n"
                 f"dev: {self.constants['deviation']}, "
                 f"stick: {self.constants['stick_sec']} sec,\n"
                 f"sperm/egg interaction: {contacts_count} during {self.constants['sim_min']} min, "
                 f"egg: {self.constants['egg_localization']}, "
             )
             if shape == "spot":
                 title_str_3d += f"spot_angle: {self.constants.get('spot_angle', 'N/A')} degree"
             fig.suptitle(title_str_3d, fontsize=8, y=0.93)
             egg_u = np.linspace(0, 2 * np.pi, 50)
             egg_v = np.linspace(0, np.pi, 50)
             ex = (
                 self.egg_center[0]
                 + self.egg_radius * np.outer(np.cos(egg_u), np.sin(egg_v))
             )
             ey = (
                 self.egg_center[1]
                 + self.egg_radius * np.outer(np.sin(egg_u), np.sin(egg_v))
             )
             ez = (
                 self.egg_center[2]
                 + self.egg_radius * np.outer(
                     np.ones(np.size(egg_u)), np.cos(egg_v)
                 )
             )
-            ax.plot_surface(ex, ey, ez, color='yellow', alpha=0.2)
             if shape == "spot":
                 spot_r = self.constants.get('spot_r', 5)
                 spot_angle_deg = self.constants.get('spot_angle', 60)
                 shape_u = np.linspace(0, 2*np.pi, 60)
                 theta_max_rad = np.deg2rad(spot_angle_deg)
                 shape_v = np.linspace(0, theta_max_rad, 60)
                 sx = spot_r * np.outer(np.sin(shape_v), np.cos(shape_u))
                 sy = spot_r * np.outer(np.sin(shape_v), np.sin(shape_u))
                 sz = spot_r * np.outer(np.cos(shape_v), np.ones(np.size(shape_u)))
                 ax.plot_surface(sx, sy, sz, color='red', alpha=0.15)
             elif shape == "drop":
                 drop_r = self.constants['drop_r']
                 shape_u = np.linspace(0, 2*np.pi, 60)
                 shape_v = np.linspace(0, np.pi, 60)
                 sx = drop_r * np.outer(np.sin(shape_v), np.cos(shape_u))
                 sy = drop_r * np.outer(np.sin(shape_v), np.sin(shape_u))
                 sz = drop_r * np.outer(np.cos(shape_v), np.ones(np.size(shape_u)))
                 ax.plot_surface(sx, sy, sz, color='red', alpha=0.15)
+            ax.plot_surface(ex, ey, ez, color='yellow', alpha=0.2)
             lines = [ax.plot([], [], [], lw=2)[0] for _ in range(num_sperm)]
             def init():
                 for line in lines:
                     line.set_data([], [])
                     line.set_3d_properties([])
                 return lines
             def animate(i):
                 if i % 10 == 0:
                     percentage = (i / (n_sim - 1)) * 100
                     print(f"Progress: {percentage:.2f}%")
                 for j, line in enumerate(lines):
                     base_pos = self.simulation.trajectory[j, i]
                     end_pos = self.simulation.trajectory[j, i + 1]
                     line.set_data(
                         [base_pos[0], end_pos[0]],
                         [base_pos[1], end_pos[1]]
                     )
                     line.set_3d_properties([base_pos[2], end_pos[2]])
                     line.set_color(self.simulation.vec_colors[j, i])
                     line.set_linewidth(self.simulation.vec_thickness_3d[j, i])
                 return lines
             self.sperm_plot.set_min_max(self.constants.get('volume', 1))
             self.sperm_plot.set_ax_3D(ax)
             anim = FuncAnimation(
                 fig,
