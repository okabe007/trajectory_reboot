diff --git a/core/geometry.py b/core/geometry.py
index 492f4eb7c207d5abb7e2ffaa7f51946c6732003a..e80dc1e3a93740a8adc4b4ba21ef2504246da44b 100644
--- a/core/geometry.py
+++ b/core/geometry.py
@@ -99,51 +99,50 @@ def _handle_drop_outside(
     vec : np.ndarray
         修正後のベクトル
     base_pos : np.ndarray
         曲げた後の新しい開始位置（通常は交点）
     stick_status : int
         更新後の stick_status 値
     """
 
     angle_rad = 2 * np.pi / 70  # 70角形分の角度
     max_iterations = 100  # 無限ループ防止
     iteration = 0
 
     while iteration < max_iterations:
         intersect, remain = _line_sphere_intersection(
             base_pos, base_pos + vec, constants["drop_r"]
         )
         normal = intersect / (np.linalg.norm(intersect) + 1e-12)
 
         vec = bend_along_sphere_surface(vec, normal, angle_rad)
         base_pos = intersect
         candidate = base_pos + vec * remain
 
         status = _io_check_drop(candidate, constants, base_pos)
 
         if status == "inside":
-            stick_status = max(0, stick_status - 1)
             break
         elif stick_status == 0:
             stick_status = int(surface_time * sample_rate_hz)
             break
 
         iteration += 1
 
     return vec, base_pos, stick_status
 
 class IOStatus:
     INSIDE = "inside"
     TEMP_ON_SURFACE = "temp_on_surface"
     TEMP_ON_EDGE = "temp_on_edge"
     OUTSIDE = "outside"
 
 class BaseShape:
     def __init__(self, constants):
         self.constants = constants
 
     def get_limits(self):
         # ここで一括管理（すべてのShapeはこのまま継承）
         keys = ['x_min', 'x_max', 'y_min', 'y_max', 'z_min', 'z_max']
         return tuple(float(self.constants[k]) for k in keys)
 
     def io_check(self, *args, **kwargs):
