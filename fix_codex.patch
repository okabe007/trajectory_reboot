diff --git a/tools/derived_constants.py b/tools/derived_constants.py
index 8d6991c..fe1b703 100644
--- a/tools/derived_constants.py
+++ b/tools/derived_constants.py
@@ -1,90 +1,58 @@
 from __future__ import annotations     # ← 1 行目
 from typing import Dict, Tuple
 
 # ------------------------------------------------------------
 # メイン関数  -------------------------------------------------
 # ------------------------------------------------------------
 def calculate_derived_constants(constants: Dict[str, float]) -> Dict[str, float]:
     """
     GUI／.ini で受け取った設定から派生変数を生成するユーティリティ。
         ・空間座標・形状パラメータ → mm に統一
         ・速度 vsl                 → mm/s で扱う
     """
     # ---------- 基本パラメータ ------------------------------------------
-    shape   = str(constants.get("shape", "cube")).lower()
-    vol     = float(constants.get("vol", 1.0))            # µL
     vsl     = float(constants.get("vsl", 0.0))            # mm/s
     hz      = float(constants.get("sampl_rate_hz", 1.0))  # Hz
-    # gamete_r は設定ファイルに保存されている値（mm）をそのまま使用する
-    # 旧設定では µm 単位の値も存在したが、グラフ描画では保存値を直接使う
-    gamete_r = float(constants.get("gamete_r", 0.0))
 
-    # ---------- 形状ごとの空間パラメータ（mm） --------------------------
-    if shape == "cube":
-        edge_length = vol ** (1 / 3)          # 1 µL = 1 mm³ なのでそのまま立方根
-        h       = edge_length / 2
-        spatial = dict(edge=edge_length,
-                       x_min=-h, x_max= h,
-                       y_min=-h, y_max= h,
-                       z_min=-h, z_max= h)
+    # 単位変換 -----------------------------------------------------
+    gamete_raw = float(constants.get("gamete_r", 0.0))
+    gamete_r = gamete_raw / 1_000.0 if gamete_raw > 10 else gamete_raw
+    constants["gamete_r"] = gamete_r
 
-    elif shape == "spot":
-        # spot_r / spot_bottom_height may already be in mm depending on the
-        # caller.  If the value looks like it is given in micrometers
-        # (typically O(100)), convert it to mm; otherwise use it as is.
-        spot_r_raw = float(constants.get("spot_r", 0.0))
-        spot_bottom_raw = float(constants.get("spot_bottom_height", 0.0))
-        spot_r_mm = spot_r_raw / 1_000.0 if spot_r_raw > 10 else spot_r_raw
-        spot_bottom_mm = (
-            spot_bottom_raw / 1_000.0 if spot_bottom_raw > 10 else spot_bottom_raw
-        )
-        spatial = dict(spot_r=spot_r_mm,
-                       x_min=-spot_r_mm, x_max= spot_r_mm,
-                       y_min=-spot_r_mm, y_max= spot_r_mm,
-                       z_min= spot_bottom_mm - spot_r_mm,
-                       z_max= spot_bottom_mm + spot_r_mm)
+    if "drop_r" in constants:
+        r_raw = float(constants["drop_r"])
+        constants["drop_r"] = r_raw / 1_000.0 if r_raw > 10 else r_raw
+        constants.setdefault("radius", constants["drop_r"])
 
-    elif shape == "drop":
-        # drop_r may be provided either in micrometers or millimeters.
-        # Values greater than ~10 are interpreted as micrometers.
-        r_raw = float(constants.get("drop_r", 0.0))
-        r_mm = r_raw / 1_000.0 if r_raw > 10 else r_raw
-        spatial = dict(drop_r=r_mm, radius=r_mm,
-                       x_min=-r_mm, x_max=r_mm,
-                       y_min=-r_mm, y_max=r_mm,
-                       z_min=-r_mm, z_max=r_mm)
+    if "spot_r" in constants:
+        r_raw = float(constants["spot_r"])
+        constants["spot_r"] = r_raw / 1_000.0 if r_raw > 10 else r_raw
+        constants.setdefault("radius", constants["spot_r"])
 
-    elif shape == "ceros":    # テスト用固定範囲
-        spatial = dict(x_min=-8.15, x_max=8.15,
-                       y_min=-8.15, y_max=8.15,
-                       z_min=-8.15, z_max=8.15)
-    else:
-        raise ValueError(f"未知の shape: {shape}")
-
-    # ---------- 共通パラメータ ------------------------------------------
-
-    spatial.update(vsl=vsl,
-                   step_length=vsl / hz if hz else 0.0,
-                   limit=1e-9,
-                   gamete_r=gamete_r)
+    if "spot_bottom_height" in constants:
+        b_raw = float(constants["spot_bottom_height"])
+        constants["spot_bottom_height"] = b_raw / 1_000.0 if b_raw > 10 else b_raw
 
+    if "spot_bottom_r" in constants:
+        br_raw = float(constants["spot_bottom_r"])
+        constants["spot_bottom_r"] = br_raw / 1_000.0 if br_raw > 10 else br_raw
 
+    # ---------- 共通パラメータ ------------------------------------------
+    constants.update(
+        vsl=vsl,
+        step_length=vsl / hz if hz else 0.0,
+        limit=1e-9,
+        gamete_r=gamete_r,
+    )
 
-    constants.update(spatial)
-    # ★ADD: ここで派生値をすべて表示
-    print("[DEBUG] derived_constants =", {k: constants[k] for k in (
-        "vsl", "step_length",
-        "x_min", "x_max", "y_min", "y_max", "z_min", "z_max",
-        "gamete_r"
-    )})
     return constants
 
 
 # ------------------------------------------------------------
 # plot_utils.py 用の軽量ヘルパー --------------------------------
 # ------------------------------------------------------------
 def get_limits(constants: Dict[str, float]) -> Tuple[float, float, float, float, float, float]:
     """x/y/z 各軸の min・max（mm）を tuple で返す"""
     return (constants["x_min"], constants["x_max"],
             constants["y_min"], constants["y_max"],
             constants["z_min"], constants["z_max"])
