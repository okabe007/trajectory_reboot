diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index 599a555710750baf85c20146f3c3b4d78a56eca5..472b366aa91374667cb70db4523d450f9affb45a 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -41,56 +41,72 @@ def draw_medium(ax, constants: dict):
         y = R * np.sin(u) * np.sin(v)
         z = R * np.cos(v)
         ax.plot_surface(x, y, z, color="pink", alpha=0.3, edgecolor="none")
 
     elif shape == "cube":
         x_min, x_max = constants["x_min"], constants["x_max"]
         y_min, y_max = constants["y_min"], constants["y_max"]
         z_min, z_max = constants["z_min"], constants["z_max"]
         for s, e in zip(
             [(x_min, y_min, z_min), (x_max, y_min, z_min), (x_max, y_max, z_min),
              (x_min, y_max, z_min), (x_min, y_min, z_max), (x_max, y_min, z_max),
              (x_max, y_max, z_max), (x_min, y_max, z_max)],
             [(x_max, y_min, z_min), (x_max, y_max, z_min), (x_min, y_max, z_min),
              (x_min, y_min, z_max), (x_max, y_min, z_max), (x_max, y_max, z_max),
              (x_min, y_max, z_max), (x_min, y_min, z_max)]
         ):
             ax.plot([s[0], e[0]], [s[1], e[1]], [s[2], e[2]], color="gray", alpha=0.2)
 
 def _set_common_2d_ax(ax, xlim, ylim, xlabel, ylabel):
     ax.set_xlim(*xlim)
     ax.set_ylim(*ylim)
     ax.set_xlabel(xlabel)
     ax.set_ylabel(ylabel)
     ax.set_aspect('equal', adjustable='box')  # ✅ 数値の増分 = 実長さに一致
 
-def draw_egg(ax, pos, radius):
-    u, v = np.mgrid[0:2*np.pi:20j, 0:np.pi:10j]
+def draw_egg(ax, pos, radius, *, color="yellow", alpha=0.6):
+    """Draw the egg as a sphere.
+
+    Parameters
+    ----------
+    ax : matplotlib axes
+        3D axes object to draw on.
+    pos : tuple[float, float, float]
+        (x, y, z) position of the egg centre.
+    radius : float
+        Radius of the egg.
+    color : str, optional
+        Surface colour (default ``"yellow"``).
+    alpha : float, optional
+        Surface transparency (default ``0.6``).
+    """
+
+    u, v = np.mgrid[0 : 2 * np.pi : 20j, 0 : np.pi : 10j]
     x = radius * np.cos(u) * np.sin(v) + pos[0]
     y = radius * np.sin(u) * np.sin(v) + pos[1]
     z = radius * np.cos(v) + pos[2]
-    ax.plot_surface(x, y, z, color='red', alpha=0.3, edgecolor='none')
+    ax.plot_surface(x, y, z, color=color, alpha=alpha, edgecolor="none")
 # =======================
 # 🟨 2D軌跡プロット
 # =======================
 from matplotlib.patches import Circle
 
 def plot_2d_trajectories(trajs, constants, save_path=None, show=True, max_sperm=None):
     from tools.derived_constants import get_limits, _egg_position
 
     x_min, x_max, y_min, y_max, z_min, z_max = get_limits(constants)
     fig, axs = plt.subplots(1, 3, figsize=(12, 4))
 
     shape = constants.get('shape', 'cube').lower()
     drop_r = float(constants.get('drop_r', 0.0))
     spot_r = float(constants.get('spot_r', 0.0))
     egg_r = float(constants.get("gamete_r", 0.05))
     egg_pos = _egg_position(constants)
 
     if max_sperm is None:
         max_sperm = trajs.shape[0]
 
     # 軌跡描画
     for s in range(min(max_sperm, trajs.shape[0])):
         axs[0].plot(trajs[s, :, 0], trajs[s, :, 1])  # XY
         axs[1].plot(trajs[s, :, 0], trajs[s, :, 2])  # XZ
         axs[2].plot(trajs[s, :, 1], trajs[s, :, 2])  # YZ
diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index 599a555710750baf85c20146f3c3b4d78a56eca5..472b366aa91374667cb70db4523d450f9affb45a 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -135,58 +151,55 @@ def plot_2d_trajectories(trajs, constants, save_path=None, show=True, max_sperm=
         (egg_pos[1], egg_pos[2]), egg_r,
         facecolor="yellow", alpha=0.6,
         edgecolor="gray", linewidth=1.0
     ))
 
     # 軸とアスペクト比
     axs[0].set_title("XY")
     axs[1].set_title("XZ")
     axs[2].set_title("YZ")
 
     _set_common_2d_ax(axs[0], (x_min, x_max), (y_min, y_max), "X", "Y")
     _set_common_2d_ax(axs[1], (x_min, x_max), (z_min, z_max), "X", "Z")
     _set_common_2d_ax(axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z")
 
     fig.tight_layout()
     if save_path:
         fig.savefig(save_path)
     if show:
         plt.show()
 
 
 # =======================
 # 🟨 3D用の補助描画関数
 # =======================
 def draw_egg_3d(ax: plt.Axes, constants: dict) -> None:
-    egg_x, egg_y, egg_z = _egg_position(constants)
+    """Convenience wrapper for :func:`draw_egg` using ``constants``."""
+
+    egg_pos = _egg_position(constants)
     r = constants.get("gamete_r", 0.15)
-    u = np.linspace(0, 2 * np.pi, 30)
-    v = np.linspace(0, np.pi, 30)
-    x = egg_x + r * np.outer(np.cos(u), np.sin(v))
-    y = egg_y + r * np.outer(np.sin(u), np.sin(v))
-    z = egg_z + r * np.outer(np.ones_like(u), np.cos(v))
-    ax.plot_surface(x, y, z, color='yellow', alpha=0.6, edgecolor='none')
+    draw_egg(ax, egg_pos, r)
 
 
 def draw_motion_area_3d(ax: plt.Axes, constants: dict) -> None:
     shape = constants.get("shape", "cube").lower()
 
     if shape == "spot":
         R = constants.get("spot_R", 1.0)
         angle_deg = constants.get("spot_angle", 60.0)
         theta = np.linspace(0, np.deg2rad(angle_deg), 30)
         phi = np.linspace(0, 2 * np.pi, 30)
         theta, phi = np.meshgrid(theta, phi)
         x = R * np.sin(theta) * np.cos(phi)
         y = R * np.sin(theta) * np.sin(phi)
         z = R * np.cos(theta)
         ax.plot_surface(x, y, z, color="red", alpha=0.3, edgecolor="none")
 
     elif shape == "drop":
         R = constants.get("drop_r", 1.0)
         u = np.linspace(0, 2 * np.pi, 30)
         v = np.linspace(0, np.pi / 2, 30)
         x = R * np.outer(np.cos(u), np.sin(v))
         y = R * np.outer(np.sin(u), np.sin(v))
         z = R * np.outer(np.ones_like(u), np.cos(v))
         ax.plot_surface(x, y, z, color="blue", alpha=0.3, edgecolor="none")
 
