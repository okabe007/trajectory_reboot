diff --git a/tools/plot_utils.py b/tools/plot_utils.py
index 8192b827d73a2c76c77f7ef750ac338faacd84cd..6f4dc72a1feccf2a3f352870eb0a1ec1d286ca56 100644
--- a/tools/plot_utils.py
+++ b/tools/plot_utils.py
@@ -89,53 +89,54 @@ def plot_2d_trajectories(trajs, constants, save_path=None, show=True, max_sperm=
     if max_sperm is None:
         max_sperm = trajs.shape[0]
 
     # 軌跡描画
     for s in range(min(max_sperm, trajs.shape[0])):
         axs[0].plot(trajs[s, :, 0], trajs[s, :, 1])  # XY
         axs[1].plot(trajs[s, :, 0], trajs[s, :, 2])  # XZ
         axs[2].plot(trajs[s, :, 1], trajs[s, :, 2])  # YZ
 
     # 背景（メディウム）描画
     if shape == "drop":
         medium_r = drop_r
         center = (0.0, 0.0)
         axs[0].add_patch(Circle(center, medium_r, color="pink", alpha=0.3))  # XY
         axs[1].add_patch(Circle((0, 0), medium_r, color="pink", alpha=0.3))  # XZ
         axs[2].add_patch(Circle((0, 0), medium_r, color="pink", alpha=0.3))  # YZ
 
     elif shape == "spot":
         medium_r = spot_r
         center_z = constants.get("spot_bottom_height", 0.0) + egg_r
         axs[0].add_patch(Circle((0, 0), medium_r, color="pink", alpha=0.3))  # XY
         axs[1].add_patch(Circle((0, center_z), medium_r, color="pink", alpha=0.3))  # XZ
         axs[2].add_patch(Circle((0, center_z), medium_r, color="pink", alpha=0.3))  # YZ
 
     # 卵子描画（円）
-    axs[0].add_patch(Circle((egg_pos[0], egg_pos[1]), egg_r, color="yellow", alpha=0.6))  # XY
-    axs[1].add_patch(Circle((egg_pos[0], egg_pos[2]), egg_r, color="yellow", alpha=0.6))  # XZ
-    axs[2].add_patch(Circle((egg_pos[1], egg_pos[2]), egg_r, color="yellow", alpha=0.6))  # YZ
+    egg_kw = dict(color="yellow", alpha=0.6, edgecolor="lightgray", linewidth=0.5)
+    axs[0].add_patch(Circle((egg_pos[0], egg_pos[1]), egg_r, **egg_kw))  # XY
+    axs[1].add_patch(Circle((egg_pos[0], egg_pos[2]), egg_r, **egg_kw))  # XZ
+    axs[2].add_patch(Circle((egg_pos[1], egg_pos[2]), egg_r, **egg_kw))  # YZ
 
     # 軸とアスペクト比
     axs[0].set_title("XY")
     axs[1].set_title("XZ")
     axs[2].set_title("YZ")
 
     _set_common_2d_ax(axs[0], (x_min, x_max), (y_min, y_max), "X", "Y")
     _set_common_2d_ax(axs[1], (x_min, x_max), (z_min, z_max), "X", "Z")
     _set_common_2d_ax(axs[2], (y_min, y_max), (z_min, z_max), "Y", "Z")
 
     fig.tight_layout()
     if save_path:
         fig.savefig(save_path)
     if show:
         plt.show()
 
 
 # =======================
 # 🟨 3D用の補助描画関数
 # =======================
 def draw_egg_3d(ax: plt.Axes, constants: dict) -> None:
     egg_x, egg_y, egg_z = _egg_position(constants)
     r = constants.get("gamete_r", 0.15)
     u = np.linspace(0, 2 * np.pi, 30)
     v = np.linspace(0, np.pi, 30)
