diff --git a/gui_app.py b/gui_app.py
index 84b25f5..323ce02 100644
--- a/gui_app.py
+++ b/gui_app.py
@@ -1,74 +1,104 @@
 #!/usr/bin/env python3
 # -*- coding: utf-8 -*-
 """
 Tkinter GUI for Sperm Simulation
 --------------------------------
 ・GUI → .ini 保存 → Simulation 実行 → プロット表示（2D / movie）
 ・派生値計算は core/simulation.py 側で行う（mm 単位）
 """
 
 import os
 import tkinter as tk
 from tkinter import ttk
 import configparser
 import numpy as np
+import math
 
 from core.simulation import SpermSimulation       # ← ここで派生変数計算を呼ぶ
 from tools.plot_utils import plot_2d_trajectories, plot_3d_trajectories
 from tools.derived_constants import calculate_derived_constants
 
 # ---------------------------------------------------------------------------
 # .ini ファイルのパス
 # ---------------------------------------------------------------------------
 CONFIG_PATH = os.path.join(os.path.dirname(__file__), "sperm_config.ini")
 
 # 保存時のキー順（GUI 表示順と合わせる）
 PARAM_ORDER = [
     "shape", "spot_angle", "vol", "sperm_conc", "vsl", "deviation",
     "surface_time", "egg_localization", "gamete_r", "sim_min",
     "sampl_rate_hz", "seed_number", "sim_repeat", "display_mode",
 ]
 
 # デフォルト設定
 default_values = {
     "shape": "cube",
     "spot_angle": 50.0,
     "vol": 6.25,               # µL
     "sperm_conc": 10_000.0,    # cells/mL
     "vsl": 0.13,               # mm/s
     "deviation": 0.4,
     "surface_time": 2.0,
     "egg_localization": "bottom_center",
     "gamete_r": 0.04,          # mm  (GUI 表示は µm)
     "sim_min": 1.0,            # min 実測値ではなく「分」→秒に変換は simulation 側
     "sampl_rate_hz": 4.0,
     "seed_number": "None",
     "sim_repeat": 1,
     "display_mode": ["2D"],    # 文字列リスト
 }
 
+# ---------------------------------------------------------------------------
+# geometry helpers
+# ---------------------------------------------------------------------------
+def _calc_spot_geometry(volume_ul: float, angle_deg: float) -> tuple[float, float, float]:
+    """Return (spot_r_mm, bottom_r_mm, bottom_height_mm) from volume and angle."""
+    angle_rad = math.radians(angle_deg)
+    vol_um3 = volume_ul * 1e9
+
+    def cap_volume(R: float) -> float:
+        h = R * (1 - math.cos(angle_rad))
+        return math.pi * h * h * (3 * R - h) / 3
+
+    low = 0.0
+    high = max(vol_um3 ** (1 / 3), 1.0)
+    while cap_volume(high) < vol_um3:
+        high *= 2.0
+
+    for _ in range(60):
+        mid = (low + high) / 2.0
+        if cap_volume(mid) < vol_um3:
+            low = mid
+        else:
+            high = mid
+
+    R_um = (low + high) / 2.0
+    bottom_r_um = R_um * math.sin(angle_rad)
+    bottom_height_um = -R_um * math.cos(angle_rad)
+    return R_um / 1000.0, bottom_r_um / 1000.0, bottom_height_um / 1000.0
+
 # ---------------------------------------------------------------------------
 # .ini 読み書きユーティリティ
 # ---------------------------------------------------------------------------
 def save_config(values: dict) -> None:
     cfg = configparser.ConfigParser()
     ordered = {}
     for k in PARAM_ORDER:
         if k not in values:
             continue
         v = values[k]
         if k == "display_mode":
             ordered[k] = ",".join(v) if isinstance(v, list) else str(v)
         else:
             ordered[k] = str(v)
     # 保存対象外のキーもまとめて保存
     for k in sorted(values.keys()):
         if k in ordered or k in PARAM_ORDER:
             continue
         ordered[k] = str(values[k])
     cfg["simulation"] = ordered
     with open(CONFIG_PATH, "w") as f:
         cfg.write(f)
 
 
 def load_config() -> dict:
diff --git a/gui_app.py b/gui_app.py
index 84b25f5..323ce02 100644
--- a/gui_app.py
+++ b/gui_app.py
@@ -273,58 +303,104 @@ class SimApp(tk.Tk):
         1. GUI の Tk 変数 → self.config_data へ安全にコピー
            （vsl は mm/s、gamete_r は mm）
         2. .ini に保存
         3. シミュレーションを実行
         """
         # --- ① Tk → config_data（vsl, gamete_r は mm で保持） -----
         for k, var in self.tk_vars.items():
             try:
                 if isinstance(var, (tk.DoubleVar, tk.IntVar)):
                     val = float(var.get()) if isinstance(var, tk.DoubleVar) else int(var.get())
                     if k == "vsl":
                         val /= 1000.0  # µm/s → mm/s
                     elif k == "gamete_r":
                         val /= 1000.0  # µm  → mm
                     self.config_data[k] = val
                 else:
                     self.config_data[k] = var.get()
             except Exception:
                 self.config_data[k] = var.get()
 
         # display_mode（ラジオボタン）
         mode = self.tk_vars["display_mode"].get()
         modes = [mode] if mode else []
         self.config_data["display_mode"] = modes
 
-        # --- drop_r 計算 -----------------------------------------------
+        # --- ② shape specific parameters -------------------------------
         shape = str(self.config_data.get("shape", "")).lower()
-        if shape == "drop":
-            vol_ul = float(self.config_data.get("vol", 0.0))
-            r_um = ((3 * vol_ul * 1e9) / (4 * np.pi)) ** (1.0 / 3.0)
-            self.config_data["drop_r"] = r_um
+        vol_ul = float(self.config_data.get("vol", 0.0))
+
+        if shape == "cube":
+            edge = vol_ul ** (1 / 3)
+            half = edge / 2
+            self.config_data.update(
+                edge=edge,
+                x_min=-half, x_max=half,
+                y_min=-half, y_max=half,
+                z_min=-half, z_max=half,
+            )
+
+        elif shape == "drop":
+            r = (3 * vol_ul / (4 * math.pi)) ** (1 / 3)
+            self.config_data.update(
+                drop_r=r,
+                radius=r,
+                x_min=-r, x_max=r,
+                y_min=-r, y_max=r,
+                z_min=-r, z_max=r,
+            )
+
+        elif shape == "spot":
+            angle = float(self.config_data.get("spot_angle", 0.0))
+            spot_r, bottom_r, bottom_h = _calc_spot_geometry(vol_ul, angle)
+            self.config_data.update(
+                spot_r=spot_r,
+                spot_bottom_r=bottom_r,
+                spot_bottom_height=bottom_h,
+                radius=spot_r,
+                x_min=-spot_r, x_max=spot_r,
+                y_min=-spot_r, y_max=spot_r,
+                z_min=bottom_h - spot_r,
+                z_max=bottom_h + spot_r,
+            )
+
+        elif shape == "ceros":
+            self.config_data.update(
+                x_min=-8.15, x_max=8.15,
+                y_min=-8.15, y_max=8.15,
+                z_min=-8.15, z_max=8.15,
+            )
+
+        # --- ③ generic parameters ------------------------------------
+        vsl = float(self.config_data.get("vsl", 0.0))
+        hz = float(self.config_data.get("sampl_rate_hz", 1.0))
+        self.config_data.update(
+            step_length=vsl / hz if hz else 0.0,
+            limit=1e-9,
+        )
 
-        # --- ② 派生値計算 ---------------------------------------------
+        # --- ④ 派生値計算（互換性用） ---------------------------------
         self.config_data = calculate_derived_constants(self.config_data)
 
         # --- ③ ini 保存 -----------------------------------------------
         save_config(self.config_data)
         # --- ④ シミュレーション実行 --------------------------------------
         sim = SpermSimulation(self.config_data)
         sim.run(self.config_data["sim_repeat"])
 
         # --- ⑤ 描画 -----------------------------------------------------
         if "2D" in modes:
             plot_2d_trajectories(np.array(sim.trajectory), self.config_data)
         elif "3D" in modes:
             plot_3d_trajectories(np.array(sim.trajectory), self.config_data)
         elif "movie" in modes:
             sim.plot_movie_trajectories()   # 実装に合わせて
 
 
     # ---------------------------------------------------------------------
     # 起動時に .ini から各 Tk 変数を復元
     # ---------------------------------------------------------------------
     def _restore_from_config(self) -> None:
         for k, var in self.tk_vars.items():
             if k not in self.config_data:
                 continue
             v = self.config_data[k]
