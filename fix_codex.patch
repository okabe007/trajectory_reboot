diff --git a/spermsim/main.py b/spermsim/main.py
index 3f2f5b5..7f9e81f 100644
--- a/spermsim/main.py
+++ b/spermsim/main.py
@@ -1590,60 +1590,68 @@ class SpermTrajectoryVisualizer:
             egg_u = np.linspace(0, 2 * np.pi, 50)
             egg_v = np.linspace(0, np.pi, 50)
             ex = (
                 self.egg_center[0]
                 + self.egg_radius * np.outer(np.cos(egg_u), np.sin(egg_v))
             )
             ey = (
                 self.egg_center[1]
                 + self.egg_radius * np.outer(np.sin(egg_u), np.sin(egg_v))
             )
             ez = (
                 self.egg_center[2]
                 + self.egg_radius * np.outer(
                     np.ones(np.size(egg_u)), np.cos(egg_v)
                 )
             )
             if shape == "spot":
                 spot_r = self.constants.get('spot_r', 5)
                 spot_angle_deg = self.constants.get('spot_angle', 60)
                 shape_u = np.linspace(0, 2*np.pi, 60)
                 theta_max_rad = np.deg2rad(spot_angle_deg)
                 shape_v = np.linspace(0, theta_max_rad, 60)
                 sx = spot_r * np.outer(np.sin(shape_v), np.cos(shape_u))
                 sy = spot_r * np.outer(np.sin(shape_v), np.sin(shape_u))
                 sz = spot_r * np.outer(np.cos(shape_v), np.ones(np.size(shape_u)))
-                ax.plot_surface(sx, sy, sz, color='red', alpha=0.15)
+                ax.plot_surface(sx, sy, sz, color='pink', alpha=0.15)
             elif shape == "drop":
                 drop_r = self.constants['drop_r']
                 shape_u = np.linspace(0, 2*np.pi, 60)
                 shape_v = np.linspace(0, np.pi, 60)
                 sx = drop_r * np.outer(np.sin(shape_v), np.cos(shape_u))
                 sy = drop_r * np.outer(np.sin(shape_v), np.sin(shape_u))
                 sz = drop_r * np.outer(np.cos(shape_v), np.ones(np.size(shape_u)))
-                ax.plot_surface(sx, sy, sz, color='red', alpha=0.15)
-            ax.plot_surface(ex, ey, ez, color='yellow', alpha=0.2)
+                ax.plot_surface(sx, sy, sz, color='pink', alpha=0.15)
+            ax.plot_surface(
+                ex,
+                ey,
+                ez,
+                color='yellow',
+                alpha=0.2,
+                edgecolor='gray',
+                linewidth=0.5,
+            )
             lines = [ax.plot([], [], [], lw=2)[0] for _ in range(num_sperm)]
             def init():
                 for line in lines:
                     line.set_data([], [])
                     line.set_3d_properties([])
                 return lines
             def animate(i):
                 if i % 10 == 0:
                     percentage = (i / (n_sim - 1)) * 100
                     print(f"Progress: {percentage:.2f}%")
                 for j, line in enumerate(lines):
                     base_pos = self.simulation.trajectory[j, i]
                     end_pos = self.simulation.trajectory[j, i + 1]
                     line.set_data(
                         [base_pos[0], end_pos[0]],
                         [base_pos[1], end_pos[1]]
                     )
                     line.set_3d_properties([base_pos[2], end_pos[2]])
                     line.set_color(self.simulation.vec_colors[j, i])
                     line.set_linewidth(self.simulation.vec_thickness_3d[j, i])
                 return lines
             self.sperm_plot.set_min_max(self.constants.get('volume', 1))
             self.sperm_plot.set_ax_3D(ax)
             anim = FuncAnimation(
                 fig,
