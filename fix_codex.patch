diff --git a/core/simulation.py b/core/simulation.py
index 065c7ccb08b1c3fc6132ebd14b2ec7edc071110f..1f8f342d1d416717c48436d32054f8c5696264c6 100644
--- a/core/simulation.py
+++ b/core/simulation.py
@@ -434,67 +434,59 @@ class SpermSimulation:
                     if shape == "spot" and bottom_modes[i] and stick_statuses[i] > 0:
                         vec[2] = 0.0
                         vec /= np.linalg.norm(vec) + 1e-12
 
                     candidate = pos + vec * step_len
 
                     if shape == "drop":
                         base_pos = pos
                         move_len = step_len
                         status = _io_check_drop(candidate, self.constants, base_pos)
                         if status == "outside":
                             vec, base_pos, stick_statuses[i] = _handle_drop_outside(
                                 vec,
                                 base_pos,
                                 self.constants,
                                 surface_time,
                                 sample_rate_hz,
                                 stick_statuses[i]
                             )
                             if stick_statuses[i] > 0:
                                 surface_modes[i] = True
                             candidate = base_pos + vec * move_len
 
                     elif shape == "spot":
                         prev = prev_states[i]
-                        status = IO_check_spot(pos, candidate, self.constants, prev)
+                        candidate, status, bottom_hit = _io_check_spot(
+                            pos, candidate, self.constants, prev, stick_statuses[i]
+                        )
                         prev_states[i] = status
 
-                        if status == "sphere_out":
-                            normal = candidate / (np.linalg.norm(candidate) + 1e-12)
-                            vec = vec - 2 * np.dot(vec, normal) * normal
-                            vec /= np.linalg.norm(vec) + 1e-12
-                            candidate = pos + vec * step_len
-
-                        elif status == "spot_edge_out":
-                            normal = np.array([candidate[0], candidate[1], 0.0])
-                            normal /= np.linalg.norm(normal) + 1e-12
-                            vec = vec - 2 * np.dot(vec, normal) * normal
-                            vec /= np.linalg.norm(vec) + 1e-12
-                            candidate = pos + vec * step_len
-
-                        elif status in ["bottom_out", "spot_bottom", "polygon_mode"]:
+                        if bottom_hit or status in [
+                            SpotIO.SPOT_BOTTOM,
+                            SpotIO.POLYGON_MODE,
+                        ]:
                             bottom_modes[i] = True
                             if stick_statuses[i] == 0:
                                 stick_statuses[i] = int(
                                     self.constants["surface_time"] /
                                     self.constants["sample_rate_hz"]
                                 )
 
                         vec = (candidate - pos) / step_len
 
                     disp_len = np.linalg.norm(candidate - pos)
                     max_len = step_len
                     if disp_len > max_len * 1.05:
                         print(
                             f"[ERROR] displacement {disp_len} mm exceeds "
                             f"step_length {max_len} mm at rep={rep}, sperm={i}, step={j}"
                         )
                         print(f"pos={pos}, candidate={candidate}, vec={vec}")
                         raise RuntimeError("step length exceeded")
 
                     pos = candidate
                     traj.append(pos.copy())
 
                     if shape == "spot":
                         if bottom_modes[i]:
                             if stick_statuses[i] > 0:
